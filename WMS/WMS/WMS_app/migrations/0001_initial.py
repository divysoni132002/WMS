# Generated by Django 5.0.8 on 2024-10-28 17:41

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AssignedExercise',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_id', models.IntegerField()),
                ('name', models.CharField(max_length=255)),
                ('arcw', models.CharField(max_length=1)),
                ('time', models.IntegerField(null=True)),
                ('count', models.IntegerField(null=True)),
                ('ex_gap', models.IntegerField(null=True)),
                ('ex_reps', models.IntegerField()),
                ('gap', models.IntegerField()),
                ('plan_day', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='Coaches',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(max_length=100, unique=True)),
                ('password', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='EmailLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event', models.CharField(max_length=255)),
                ('subject', models.CharField(max_length=255)),
                ('email_status', models.CharField(max_length=500)),
                ('message', models.TextField()),
                ('user_id', models.CharField(blank=True, max_length=255, null=True)),
                ('phone', models.CharField(blank=True, max_length=20, null=True)),
                ('username', models.CharField(blank=True, max_length=255, null=True)),
                ('corporate_name', models.CharField(blank=True, max_length=255, null=True)),
                ('corporate_phone', models.CharField(blank=True, max_length=255, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Exercise',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name_of_exercise', models.CharField(max_length=255)),
                ('video_id', models.CharField(blank=True, max_length=20, null=True)),
                ('arcw', models.CharField(choices=[('A', 'Aerobic'), ('R', 'Resistance'), ('C', 'Combination'), ('W', 'Warm up'), ('Y', 'Yoga')], max_length=1, verbose_name='ARCW (Aerobic, Resistance, Combination, Warm up)')),
                ('time', models.IntegerField(blank=True, help_text='Time in seconds (can be empty)', null=True)),
                ('count', models.IntegerField(blank=True, help_text='Number of times', null=True)),
                ('gap_between_exercises', models.IntegerField(blank=True, null=True, verbose_name='Gap between exercises (seconds)')),
                ('number_of_reps', models.IntegerField(blank=True, null=True, verbose_name='Number of reps')),
                ('gap_between_reps', models.IntegerField(blank=True, null=True, verbose_name='Gap between reps (seconds)')),
                ('total_duration', models.IntegerField(blank=True, null=True)),
                ('notes', models.TextField(blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='fitness_info',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_id', models.IntegerField()),
                ('age_group', models.TextField()),
                ('phase_of_cycle', models.CharField(blank=True, max_length=20, null=True)),
                ('bmi', models.CharField(max_length=20)),
                ('prakriti', models.CharField(max_length=50)),
                ('calories_comsumed', models.CharField(max_length=50)),
                ('tdee', models.CharField(max_length=20)),
                ('work_lifestyle', models.CharField(blank=True, max_length=50, null=True)),
                ('goals', models.CharField(blank=True, max_length=100, null=True)),
                ('persona_number', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='FitnessPlanSubmission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name_of_user', models.CharField(max_length=255, verbose_name='Name of User')),
                ('date_of_assignment', models.DateField(verbose_name='Date of Assignment')),
                ('time_of_assignment', models.TimeField(verbose_name='Time of Assignment')),
                ('user_id', models.IntegerField(verbose_name='User ID')),
            ],
            options={
                'verbose_name': 'Fitness Plan Submission',
                'verbose_name_plural': 'Fitness Plan Submissions',
            },
        ),
        migrations.CreateModel(
            name='LQ_data',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('time', models.TimeField()),
                ('user_id', models.IntegerField(blank=True, null=True)),
                ('normalised_sleep_score', models.FloatField(blank=True, null=True)),
                ('normalised_pss_score', models.FloatField(blank=True, null=True)),
                ('normalised_occ_score', models.FloatField(blank=True, null=True)),
                ('normalised_met_score', models.FloatField(blank=True, null=True)),
                ('Final_LQ_score', models.FloatField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='MenstrualCyclePrediction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_id', models.CharField(max_length=10)),
                ('date_of_entry', models.DateTimeField()),
                ('signup_last_period_start_date', models.DateField(blank=True, null=True)),
                ('signup_last_period_end_date', models.DateField(blank=True, null=True)),
                ('last_period_start_date', models.DateField(blank=True, null=True)),
                ('last_period_end_date', models.DateField(blank=True, null=True)),
                ('month_since_signup', models.IntegerField(blank=True, null=True)),
                ('duration_of_flow', models.IntegerField()),
                ('avg_duration_of_flow', models.IntegerField()),
                ('cycle_length', models.IntegerField()),
                ('variation', models.CharField(blank=True, max_length=255, null=True)),
                ('cycle_max_length', models.IntegerField(blank=True, null=True)),
                ('cycle_min_length', models.IntegerField(blank=True, null=True)),
                ('current_phase', models.CharField(blank=True, max_length=50, null=True)),
                ('ovulation_date', models.DateField(blank=True, null=True)),
                ('ovulation_date_range_start', models.DateField(blank=True, null=True)),
                ('ovulation_date_range_end', models.DateField(blank=True, null=True)),
                ('prob_ovulation_start_date_min', models.DateField(blank=True, null=True)),
                ('prob_ovulation_end_date_max', models.DateField(blank=True, null=True)),
                ('fertile_period_start', models.DateField(blank=True, null=True)),
                ('fertile_period_end', models.DateField(blank=True, null=True)),
                ('highly_fertile_start', models.DateField(blank=True, null=True)),
                ('highly_fertile_end', models.DateField(blank=True, null=True)),
                ('next_period_start_date', models.DateField(blank=True, null=True)),
                ('next_period_end_date', models.DateField(blank=True, null=True)),
                ('next_period_start_date_min', models.DateField(blank=True, null=True)),
                ('next_period_end_date_max', models.DateField(blank=True, null=True)),
                ('current_day_of_cycle', models.IntegerField()),
                ('today_hormone_levels', models.JSONField(blank=True, null=True)),
                ('next_days_hormone_levels', models.JSONField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='OccStress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_id', models.IntegerField()),
                ('answer', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='PostPlanData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('time', models.TimeField()),
                ('user_id', models.IntegerField(blank=True, null=True)),
                ('prakriti', models.CharField(max_length=100)),
                ('vikriti', models.CharField(max_length=100)),
                ('mwq_score', models.FloatField()),
                ('mwq_answers', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='PSSResponse',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_id', models.IntegerField()),
                ('qad', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='SleepScore',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_id', models.IntegerField()),
                ('answer', models.TextField()),
                ('score', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(max_length=100)),
                ('date', models.DateField()),
                ('time', models.TimeField()),
                ('task', models.CharField(max_length=200)),
                ('hours', models.FloatField()),
                ('status', models.CharField(max_length=50)),
                ('dependency', models.CharField(blank=True, max_length=100, null=True)),
                ('communication_of_change', models.CharField(blank=True, max_length=100, null=True)),
                ('submission_time', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='TechLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('time', models.TimeField()),
                ('username', models.CharField(max_length=30)),
                ('change_type', models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='Vendor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(max_length=100, unique=True)),
                ('password', models.CharField(max_length=100)),
                ('email', models.EmailField(max_length=254)),
            ],
        ),
        migrations.CreateModel(
            name='FitnessPlan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('menstrual_phase', models.CharField(choices=[('Menstrual', 'Menstrual'), ('Follicular', 'Follicular'), ('Ovulation', 'Ovulation'), ('Luteal', 'Luteal')], max_length=10, verbose_name='Menstrual Phase')),
                ('video_id', models.CharField(blank=True, max_length=20, null=True)),
                ('start_date', models.DateField(verbose_name='Start Date')),
                ('end_date', models.DateField(verbose_name='End Date')),
                ('time', models.IntegerField(blank=True, help_text='Time in seconds (can be empty)', null=True)),
                ('count', models.IntegerField(blank=True, help_text='Number of times', null=True)),
                ('number_of_reps_of_exercise', models.IntegerField(blank=True, null=True, verbose_name='Number of times exercise needs to be done.')),
                ('ex_gap', models.IntegerField(blank=True, null=True, verbose_name='Gap between exercises (seconds)')),
                ('rep_gap', models.IntegerField(blank=True, null=True, verbose_name='Gap between the entire set of exercises (seconds)')),
                ('total_days', models.IntegerField(editable=False, verbose_name='Total Days to perform')),
                ('total_duration', models.IntegerField(blank=True, null=True, verbose_name='Total duration of the entire set for this exercise.')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes')),
                ('exercise', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='WMS_app.exercise', verbose_name='Exercise')),
                ('submission', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='plans', to='WMS_app.fitnessplansubmission')),
            ],
            options={
                'verbose_name': 'Fitness Plan',
                'verbose_name_plural': 'Fitness Plans',
            },
        ),
        migrations.CreateModel(
            name='DependencyResolution',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('resolved_by', models.CharField(max_length=100)),
                ('resolved_date', models.DateTimeField()),
                ('dependency', models.CharField(max_length=500)),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='WMS_app.task')),
            ],
        ),
        migrations.CreateModel(
            name='Assignment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('task_to_work_on', models.TextField()),
                ('type_of_task', models.CharField(choices=[('API_upgrade_needed', 'API upgrade needed'), ('New_API_needed', 'New API needed'), ('API_check', 'API check'), ('Bug_fix', 'Bug fix'), ('Front_end_work', 'Front end work'), ('Integration_work', 'Integration work'), ('Git_work', 'Git work'), ('UI_UX_work', 'UI/UX work'), ('Meeting_discussion', 'Meeting and discussion'), ('Others', 'Others')], max_length=20)),
                ('approved_by', models.CharField(blank=True, max_length=100, null=True)),
                ('date_of_assignment', models.DateField()),
                ('expected_hours_by_assigner', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('expected_hours_by_assignee', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('expected_date_of_delivery', models.DateField(blank=True, null=True)),
                ('date_of_delivery_by_assignee', models.DateTimeField(blank=True, null=True)),
                ('days_of_delay', models.IntegerField(blank=True, null=True)),
                ('mark_as_complete', models.BooleanField(default=False)),
                ('assign_to', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assignee', to='WMS_app.vendor')),
                ('assigned_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assigner', to='WMS_app.vendor')),
            ],
        ),
    ]
